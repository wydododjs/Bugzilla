// Example gradle script to show how a bug tracker plugin can be build

apply plugin: 'java'
apply plugin: 'osgi'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '21.2.0.0143'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly fileTree(dir: 'lib', include: 'fortify-public*.jar')
    implementation fileTree(dir: 'lib', include: 'j2bugzilla*.jar')
    implementation(group: 'commons-lang', name: 'commons-lang', version: '2.6')
    implementation(group: 'commons-logging', name: 'commons-logging', version: '1.2')
    implementation(group: 'commons-codec', name: 'commons-codec', version: '1.6')

    implementation(group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3') {
        because 'current github sources of j2bugzilla depends on xmlrpc-client 3.1.3, so plugin will use it as well'
        exclude group: 'org.apache.ws.commons.util', module: 'ws-commons-util'
    }
    implementation(group: 'org.apache.ws.commons.util', name: 'ws-commons-util', version: '1.0.2'){
        exclude group: 'org.junit', module: 'junit'
    }

    implementation("javax.xml.bind:jaxb-api:2.3.0")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime:2.2.11")
    runtimeOnly("com.sun.activation:javax.activation:1.2.0")

    testImplementation(group: 'org.junit', name: 'junit', version: '4.8.2')
}

jar.enabled = false // We don't need to generate a default non-osgi jar during build

clean {
    delete "${projectDir}/dist"
}

def bundleClassPath() {
    def list = ['.']
    configurations.runtimeClasspath.findAll {
        !it.name.contains('source-') && !it.name.contains('javadoc-')
    }.sort{ it.name }.each {
        list += 'lib/' + it.name
    }
    return list.join(',')
}

ext {
    pluginManifest = osgiManifest {
        classesDir = sourceSets.main.output.classesDirs.singleFile
        classpath = configurations.runtimeClasspath

        instructionReplace 'Bundle-Name', '%Bundle-Name'
        instruction 'Bundle-Vendor', '%Bundle-Vendor'
        instruction 'Bundle-ActivationPolicy', 'lazy'
        instruction 'Bundle-Localization', 'plugin'
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.8'
        instruction 'Built-By', 'Fortify'
        instruction 'Version', project.version
        instruction 'Bundle-ClassPath', bundleClassPath()

        instructionReplace 'Bundle-SymbolicName', 'com.hp.fortify.BugTrackerPluginBugzilla;singleton:=true'
        instructionReplace 'Bundle-Version', project.version
        instructionReplace 'Require-Bundle', 'com.fortify.common.public-api'    // Needed by AWB
        instructionReplace 'Import-Package', '!*'   // ..suppress the bndTools default import generation
        instructionReplace 'Export-Package', 'com.fortify.sample.bugtracker.bugzilla'
    }
}

task pluginJar(type: Jar) {
    baseName "com.fortify.sample.BugTrackerPluginBugzilla"
	from sourceSets.main.output
    destinationDir = file("${projectDir}/dist")
    manifest = pluginManifest
    from(projectDir) {
        include "plugin.properties"
        include "plugin.xml"
    }
    into("lib") {
        from configurations.runtimeClasspath.files
        include "*.jar"
    }
}

build.dependsOn(pluginJar)
